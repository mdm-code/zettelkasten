# Hash table implementation in Go

+go +hashtable +table +hash +structure +data

Here is the code for a basic hash table built around buckets in Go:

```go
package main

import "fmt"

const (
	length = 8
)

type hashTable struct {
	elems [length]*bucket
}

type bucket struct {
	head *node
}

type node struct {
	val  string
	next *node
}

func NewHashTable() *hashTable {
	ht := hashTable{}
	for i := 0; i < length; i++ {
		ht.elems[i] = &bucket{}
	}
	return &ht
}

func (h *hashTable) search(key string) (ok bool) {
	hashed := hash(key)
	ok = h.elems[hashed].search(key)
	return
}

func (h *hashTable) insert(key string) (ok bool) {
	hashed := hash(key)
	ok = h.elems[hashed].insert(key)
	return
}

func (h *hashTable) delete(key string) (ok bool) {
	hashed := hash(key)
	ok = h.elems[hashed].delete(key)
	return
}

func (b *bucket) search(key string) bool {
	cur := b.head
	for cur != nil {
		if cur.val == key {
			return true
		}
		cur = cur.next
	}
	return false
}

func (b *bucket) insert(key string) bool {
	n := node{key, nil}
	n.next = b.head
	b.head = &n
	return true
}

func (b *bucket) delete(key string) bool {
	if b.head.val == key {
		b.head = b.head.next
		return true
	}
	prev := b.head
	for prev.next != nil {
		if prev.next.val == key {
			prev.next = prev.next.next
			return true
		}
		prev = prev.next
	}
	return false
}

func hash(key string) int {
	var sum int
	for _, c := range key {
		sum += int(c)
	}
	return sum % length
}

func main() {
	b := bucket{}
	b.insert("1")
	b.insert("100")
	b.insert("542")
	b.insert("5")
	b.insert("50")
	b.delete("5")
	fmt.Println(b.search("5"))
	fmt.Println(b.search("542"))
	fmt.Println(b.search("52")) // This one is false

	ht := NewHashTable()
	ht.insert("2")
	ht.insert("200")
	ht.insert("201")
	ht.delete("200")
	fmt.Println(ht.search("2"))
	fmt.Println(ht.search("200"))
	fmt.Println(ht.search("201")) // This one should be false
}
```

# Go monorepo workspace


+go +work +workspace +mod +monorepo


These are some thoughts on how to set up a Go project as a monorepo. The first
thing is that in the past Go had no facilities to manage multiple modules that
carry reference to each other. It had the module from, I don't know, say, Go
1.14 or something, but there was no way to have them work in a single project
as if they were packages. The Go workspace appears to do exactly that. That
said, you should in theory be able to have multiple packages in the same
directory.

You can have a single `go.work` file at the root of the project. Go is going
to complain if you try to create another one.
.
├── go.work
├── libs
├── module1
└── module2

One way to structure monorepo is to divide your code into reusable libraries
and apps that put libs together into concrete functionalities. In this case,
each library and app can be a separate Go module. Then with go workspace, it's
possible to have imports and dependencies sorted out by adding modules to the
workspace. This way modules can get required deps without pulling them from 
remote repositories, say Github or Artifactory at your company.

With the combination of `go work` and `go mod` you'd be able to get your
monorepo up and running. If you have a Go module already at the root directory
of the project, you can very well call `go work init` there and keep both at
this level. There is nothing that would stop you from creating nested modules.
As long as they're added to the workspace, you can use them pretty much like Go
packages with their public interface.

You work with modules in the workspace the same you'd work with them in a 
regular single-module Go project. To get the workspace up and running, you'd
first call `go work init` at the root of the project. Then you'd add modules
either starting from the root or in separate directories. Inside of each
of the directories, you can call `go mod init` to create a new module whether
its an app or a library. Then you'd add the module to the workspace with
`go mod init github.com/mdm-code/workspace/mod1 or something like that.

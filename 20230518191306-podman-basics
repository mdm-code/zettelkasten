# podman basics

# VM in Podman Desktop

When running Podman Desktop, you want to create a Podman Machine, a VM, first with these commands:

```sh
podman machine init  # Initialize the VM
podman machine start
podman machine stop  # Stop the VM

# Cool one (here are two examples):
podman machine inspect --format '{{json .}}'
podman machine inspect --format '{{json . }}'  | jq '.ConfigPath.Path'
```

This will get your Podman machine up and running with default configuration.


# Migrate from Docker to Podman

Easy. Get the path to Podman socket file:

```sh
# Linux
$ podman info --format '{{.Host.RemoteSocket.Path}}'

# MacOS
$ podman machine inspect --format '{{.ConnectionInfo.PodmanSocket.Path}}'
```

And then export it `export DOCKER_HOST=<your_podman_socket_location>` and then
all tools using this environmental variable will start talking to Podman
instead of Docker.


# Most commonly used commands

Seems like the most commonly used commands work pretty much like their Docker 
equivalents. At least at the very basic level.

```sh
podman image pull ...
podman run
podman container  # etc. These appear to work pretty much like docker in the shell
```


# Containerfile & Dockerfile

Both Containerfile and Dockerfile names are interpreted by podman so no worries,
there's no need to rename the container blueprint in case you have strong opinion
about it.


# Pods?

Podman let's you create pods from containers and get it up and running with
Podman container engine. Use this command to see what's up:

```sh
podman pod --help
```


# Importing existing containers from docker

There's not much to do here. You can either go like `podman save <container>
container.tar` or `docker export <container> container.tar` to get the
container saved, and then use `podman import xxx.tar` to import it to podman.
It's fairly simple and straightforward.


# Podman and K8s

Podman can help you run local K8s clusters using Kind on its container engine.

(1) First thing is to install `kind` -- it can be done in the Podman Desktop.
There's a prompt at the bottom of the GUI. (2) And then go to Settings > Resources
has the Kind tile that's going to let you create new clusters.

You can likewise use the Kind CLI:

```sh
kind get clusters
```

For Kind configuration, you might want to set the rootful connection as default
(the one with the `*-root` suffix) with `podman connection default
podman-machine-default-root`. It is hard for me to tell if the rootful connection
is required for Kind to work properly on Linux and MacOS.


# Podman system command

This is a very interestring command exposed by Podman.

```sh
podman system -h

# connection ... - manages system connections
# info - regular system information
# df - disk usage information
# events - podman system events monitoring
# prune - remove unused data
```


# Creating kind-powered k8s cluster

There's a way to do in the Podman GUI, but go for CLI `kind` command and use
it directly like so to create a fresh cluster.

```sh
kind create cluster --name kind-cluster

# kind get clusters -- ls clusters
# kind delete kind-cluster

# # There's no native restart in the CLI Kind command.
```

Then use `kubectl` to check the current context with `kubectl config
kind-cluster`.


# Loading Podman images to Kind locally

At least on MacOS, there seems to be a bug with `kind load docker-image ...`
causing kind not to be able to find the right image even when the right
tag is provided. A working workaround uses `image-archive` and `podman save`
to load an image from a TAR file. Here is an example:

```sh
podman save image:latest image.tar
kind load image-archive image.tar --name kind-cluster
```

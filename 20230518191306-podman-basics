# podman basics

# VM in Podman Desktop

When running Podman Desktop, you want to create a Podman Machine, a VM, first with these commands:

```sh
podman machine init  # Initialize the VM
podman machine start
podman machine stop  # Stop the VM

# Cool one (here are two examples):
podman machine inspect --format '{{json .}}'
podman machine inspect --format '{{json . }}'  | jq '.ConfigPath.Path'
```

This will get your Podman machine up and running with default configuration.


# Migrate from Docker to Podman

Easy. Get the path to Podman socket file:

```sh
# Linux
$ podman info --format '{{.Host.RemoteSocket.Path}}'

# MacOS
$ podman machine inspect --format '{{.ConnectionInfo.PodmanSocket.Path}}'
```

And then export it `export DOCKER_HOST=<your_podman_socket_location>` and then
all tools using this environmental variable will start talking to Podman
instead of Docker.


# Most commonly used commands

Seems like the most commonly used commands work pretty much like their Docker 
equivalents. At least at the very basic level.

```sh
podman image pull ...
podman run
podman container  # etc. These appear to work pretty much like docker in the shell
```


# Containerfile & Dockerfile

Both Containerfile and Dockerfile names are interpreted by podman so no worries,
there's no need to rename the container blueprint in case you have strong opinion
about it.


# Pods?

Podman let's you create pods from containers and get it up and running with
Podman container engine. Use this command to see what's up:

```sh
podman pod --help
```


# Importing existing containers from docker

There's not much to do here. You can either go like `podman save <container>
container.tar` or `docker export <container> container.tar` to get the
container saved, and then use `podman import xxx.tar` to import it to podman.
It's fairly simple and straightforward.

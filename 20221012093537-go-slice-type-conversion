# go slice type conversion


+go +golang +slice +unsafe +pointer +arithmetics


/Users/michal/Documents/journal/zettel/20220104001100-go-panic-recover
/Users/michal/Documents/journal/zettel/20211129221040-bitwise-in-go
/Users/michal/Documents/journal/zettel/20211222123928-sorting-slices-in-go
/Users/michal/Documents/journal/zettel/20220104005426-go-clear-slice
/Users/michal/Documents/journal/zettel/20220122171358-go-slice-variadic-append
/Users/michal/Documents/journal/zettel/20220122172013-go-slice-overlapping-storage
/Users/michal/Documents/journal/zettel/20220122125842-go-sparse-array-and-slice


This entry covers converting a slice of one type into the slice of a
different/derived type.

Say you have a derived string type like so that you want to use to specify
how to interact with some of your package API:

```go
type Color string
```

Then, there's a function that accepts a slice, or has a variadic argument
that works pretty much like a slice, and this function has to convert the
type `Color` back into `string` so that it can do some concatentation.

```go
package main

import (
	"fmt"
	"unsafe"
	"strings"
)

func Colorize(s string, cols ...Color) {
	if len(cols) == 0 {
		fmt.Println(s)
	}
	prefx := *(*[]string)(unsafe.Pointer(&cols))
	fmt.Println(strings.Join(prefix, "") + s + RESET)
}
```

Go won't let you do it using normal type casting - it will not compile. So in
this case, my solution would be to use `unsafe.Pointer`, although it can be
frawned upon in some cases. The other solution would be slice interation with
an append to the output silce, but this would require two slices being actively
used at the same time and linear execution speed.

Here is what you could do otherwise to keep type safety intact:

```go
...
# cols is []Color{...}
prefix := []string{}
for _, c := range cols {
	prefix = append(prefix, string(c))
}
...
```


## Benchmarks

In my testing, using `unsafe.Pointer(&x)` conversion is about three times
faster than looping over the source slice, converting the type of each element
one by one and appending it target slice. Here are some benchmarks:

```
goos: darwin
goarch: amd64
pkg: github.com/mdm-code/termcols
cpu: Intel(R) Core(TM) i5-6360U CPU @ 2.00GHz
BenchmarkColorize-4     39110109                30.03 ns/op
BenchmarkColorize2-4    10938067               105.3 ns/op
PASS
ok      github.com/mdm-code/termcols    2.480s
```

For Go, you would usually invoke benchmark testing with the following command:
`go test -bench=.`.

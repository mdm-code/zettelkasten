# shell using while loop inline

+shell +posix +while +fc +find +oneliner


/Users/michal/Documents/journal/zettel/20220713093623-truncate-file-unix
/Users/michal/Documents/journal/zettel/20210726003029-posix-sh-default-vars
/Users/michal/Documents/journal/zettel/20220107184947-watch-log-file-unix
/Users/michal/Documents/journal/zettel/20220817190018-sh-script-sourcing
/Users/michal/Documents/journal/zettel/20220601233924-posix-seq-usage
/Users/michal/Documents/journal/zettel/20210804193519-posix-check-if-command-is-on-path
/Users/michal/Documents/journal/zettel/20210804124544-tmux-move-panes
/Users/michal/Documents/journal/zettel/20220531140202-python-os-exit-codes
/Users/michal/Documents/journal/zettel/20210804122432-nested-tmux-session
/Users/michal/Documents/journal/zettel/20211103004028-favour-onliner-scripts-over-aliases-or-functions
/Users/michal/Documents/journal/zettel/20211103005910-shell-subshell-childshell-childprocess
/Users/michal/Documents/journal/zettel/20220731215349-use-command-not-which
/Users/michal/Documents/journal/zettel/20210804140943-posix-shell-conditionals
/Users/michal/Documents/journal/zettel/20210726003029-shell-cdpath
/Users/michal/Documents/journal/zettel/20220713114130-shell-shift-usage


This is a great example on how to use onliners in `sh`. File names are piped
into a while-loop which echoes `mv` commands that then go `sh -x` where `-x`
means that the command is to be printed to STDOUT upon execution.

```sh
find . -type f -name "*.log" |\
	grep -v .do-not-touch |\
	while read fname; do echo mv "${fname}" $(echo $fname | sed s/.log/.LOG/); done |\
	sh -x
```

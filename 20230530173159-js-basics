# js basics

# Declaring variables and comments

```js

/*
This is a
multiline comment.
*/

var x = 1;  // older syntax

let y = 2;

// constant; raises TypeError when asigning new value to constant variable.
const z = 3.17;
```


# Typing

```js
let b = 5;
typeof b;  // returns a STRING 'number'
```


# Table notation in JS

When calling methods or accessing properties on a Javascript object, it's
possible to use a rather awkward table notation. Have a look at the example:

```js
l = ['one', 'two']

l.join("+")

# The former equals the latter

l["join"]("+")
```

- It applies to anything that can be accessed with the regular dot notation.

- It seems like Javascript objects are maps/dictionaries underneath the hood,
  and nobody even tries to hide it.

- Strings, integers, floats, bools, undefined, symbol and other primitive types
  appear to be immutable in the regular, expected way.

- Primitive types are stored directly in variables they're passed `by-value`
  and not `by-reference`, so asigning one variable to another basically passes
  the value, copies it, and not the reference to it.

```js
a = "foo"
b = a  // a == b evaluates to false

c = []
d = c
d[0] = "bar"
console.log(d)  // [ 'bar' ] and c == d evaluates to true

- Symbol (apparently a new thing since ES6) 


# Var, let, const and variable scope

```js

var x = 0;

{
	console log.(x); // this is ok -- x comes from an eclosing scope
	let b = 1;
}

console.log(b); // raises ReferenceError
```



# Functions

Use `function name() { }` to syntax to declare a function.


```js
function print(i) {
  console.log(i);
  return i
}

fn = (i) => { console.log(i); }

// single var can skip paranthesis and brackets
fn = str => console.log(str);
```

Here is a random Fibonacci sequence in js:

```js
function fib(n) {
	if (n in [ 1, 2 ]) {
		return n
	} else {
		return fib(n-1) + fib(n-2)
	}
}

for (let i = 0; i < 10; i++) {
	console.log(fib(i));
}
```

## F-strings / template strings

It seems like these works pretty well:

```js
console.log(`Name ${person.Name}`);
```


# Conditional expressions

```
if (x > 2) {
	...
} else if (x < 2) {
	...
}else {
	...
}

// For single instruction it is possible to use without brackets:
if (false) console.log(false);

while (true) { ... };

for (let i = 0; i < 5; i++) {
	...
}

do {
	...
} while (true);


# Functions

1. You can create function with `new Function` with an object constructor, but just don't.

2. It seems default parameters with reference types (e.g. a list []) are evaluated each
   time a function is called, so it's different from what you would expect in Python, for
   instance.

3. Make a class callable with extends:

```js
class Car extends Function {
	constructor(brand, speed) {
		super( ' console.log("wrooom...") ')
		this.brand = brand
		this.speed = speed
	}
}

let bmw = new Car("bmw", 80)
bmw()  // prins out `wrooom...` to stdout
```


# Function additional arguments

It can be used as *args in Python or ...args in Go. It is a regular list, like in other
mentioned languages (Go has slices).

```js
// prints out length of 2, and the table with args
function foo(a, b, c) {
	console.log(arguments.length, arguments)
}

# Hoisting

JavaScript Hoisting refers to the process whereby the interpreter appears to
move the declaration of functions, variables or classes to the top of their
scope, prior to execution of the code. This applies to declarations and not
assignments (or initializations).

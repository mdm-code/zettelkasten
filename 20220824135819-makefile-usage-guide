# makefile usage guide


+make +makefile +gnu +linux +unix +compile


/Users/michal/Documents/journal/zettel/20221014135021-make-file-set-env-variables


Here is the guide that I based this entry on: https://makefiletutorial.com/

NOTE: The `GNU Make` is what this guide covers. Other systems should also work
just fine.


## Syntax

The syntax for a single rule (Makefile usually has more than rule) goes as 
follows:

```make
targets: requirements
	command
	command
	command
```

TARGETS are separated with spaces, so are REQUIREMENTS, but the latter have to
exist for the rule to run. COMMANDs need to start with a TAB, not spaces.

Targets are usually file names, if they exist, the rule would not be run.


## Variables

Only strings are allowed as variables, and you set them with `:=` (default),
but `=` also works well in most cases.

Variables can then be referenced using either `${x}` or `$(x)` (also $x, but
this is considered bad practice.)

E.g.:
```make
files := file1 file2

file3: ${files}
	echo "depends on: " $(files)

file1:
	touch file1

file2:
	touch file2
```


## Targets

It's easy to make an ALL target and place it as the first rule in the makefile.
this way, the ALL target will run as default when there's no target given passed
to the make command.

```make

all: one.c two.c three.c

...
```

Multiple targets means that the command runs for each and every one of them. There
is an automatic variable $@ that stores the target name so that it can be used for
invocation.


```make
f1.o f2.o:
	echo $@
...
```

This make runs for both targets separately. It equals placing them in separate
targets, but this would make it more verbose.


## Wildcards

There are two wildcards used in a makefile: % and *.

The latter * searches the file system, however, unless wrapped inside of a
wildcard function, it will no expand when there's no match found. Remeber to
use it like this:

```make
files = $(wildcard *.c)

one: files
```

The unexpanded variable assignments left as they are when the wildcard function
is not used mean that `file = *.c` will have exactly this literal assigned.

Make sure * is not used directly in the variable definition: this is another
common pitfall.

MAKE SURE YOU USE THE WILDCARD FUNCTION with the Kleene star.

The % wildcard is used in wider context:

1. In matching mode, it matches one or more characters of a string. This is
called the stem.
2. In replacing mode, it takes whatever's matched in the stem and replaces it
with something else.

It is usually used in rule definitions and in some specific functions


## Automatic variables

Here is a complete list of all automatic variables used by the GNU make:

https://www.gnu.org/software/make/manual/html_node/Automatic-Variables.html

Ninety-nine percent of the time, only the most common ones are used.

```make
foo: bar.c baz.c
	# Output the name of the rule
	echo $@

	# Output all prerequisites newer than the target
	echo $?

	# Output all prerequisites
	echo $^


## Implicit rules

It is generally advisied not to use them, yet, I will have them listed here
just in case. Here is a list:

1. C program compilation is done implicitly and automatically from n.c with
this default command: $(CC) -c $(CPPFLAGS) $(CFLAGS) $^ -o $@

2. C++ program compilation is done automatically from n.cpp or n.cc with this
command: $(CXX) -c $(CPPFLAGS) $(CXXFLAGS) $^ -o $@

3. Linking a single object file: n is made automatically from n.o with this
command: $(CC) $(LDFLAGS) $^ $(LOADLIBES) $(LDLIBS) -o $@

Here are some variables used by these implicit rules:

1. CC: Program for compiling C programs; default cc
2. CXX: Program for compiling C++ programs; default g++
3. CFLAGS: Extra flags to give to the C compiler
4. CXXFLAGS: Extra flags to give to the C++ compiler
5. CPPFLAGS: Extra flags to give to the C preprocessor
6. LDFLAGS: Extra flags to give to compilers when they are supposed to invoke
the linker


```make
CC = gcc # Flag for implicit rules
CFLAGS = -g # Flag for implicit rules. Turn on debug info

# Implicit rule #1: blah is built via the C linker implicit rule
# Implicit rule #2: blah.o is built via the C compilation implicit rule,
# because blah.c exists
blah: blah.o

blah.c:
	echo "int main() { return 0; }" > blah.c

clean:
	rm -f blah*
```

## Static pattern rules

This is one way to write less in a makefile and here is the syntax of static pattern
rules:

```make
targets...: target-pattern: prereq-patterns ...
   commands
```

The target in targets... is matched against target-pattern with the % wildcard
as a stem. Then the stem is used to replace the prereq-pattern. This way, static
pattern rules can be used to compile .c files into .o files. This goes in hand
with implicit rules.

```make
objects := foo.o bar.o baz.o

$(objects): %.o: %.c
```


## Pattern rules (say, dynamic as opposed to static)

Pattern rules are often used but quite confusing. You can look at them as two
ways:

    1. A way to define your own implicit rules
    2. A simpler form of static pattern rules

Let's start with an example first:

```make
# Define a pattern rule that compiles every .c file into a .o file
%.o : %.c
	$(CC) -c $(CFLAGS) $(CPPFLAGS) $< -o $@
```

Pattern rules contain a '%' in the target. This '%' matches any nonempty
string, and the other characters match themselves. ‘%’ in a prerequisite of a
pattern rule stands for the same stem that was matched by the '%' in the
target.


# Double-Colon Rules

Double-Colon Rules are rarely used, but allow multiple rules to be defined for
the same target. If these were single colons, a warning would be printed and
only the second set of commands would run.

```make
all: blah

blah::
	echo "hello"

blah::
	echo "hello again"
```


# Commands and execution

ONE) By default, each command in the make file gets printed, and here I don't mean
it's output gets printed, its the command as defined in the Makefile getting
printed out to STDOUT. So, The output of this sort of target results in the
output as follows:

```make
all:
	@echo "spam ham"  # This command is not printed; what does get printed is its output
	echo "foo bar"  # However, this one does - so you get two lines

# spam ham
# echo "foo bar"
# foo bar
```

TWO) Each command is run in a separate shell when they're on separate lines
meaning that they do not affect each other in the usual fashion. When they're on
the same line, they act as expected.

THREE) The default shell is set to /bin/sh, and you can change it by reassiging
the DEFAULT_SHELL variable in the Makefile.

FOUR) Using the dolar sign - double the dolar sign $$ and this is how to use
shell variables in sh or bash or zsh and others.


```make
DEFAULT_SHELL=/bin/bash
all: vars
	cd ..
	echo $(pwd)
# What gets printed here is the directory of the Makefile. The `cd` has no effect.
	
	cd ..; echo `pwd`  # This cd does affect the following echo command.

	cd ..; \
	echo $(pwd)  # This one as well - there's a line continuation sign.

mk_var = 'makefile'

vars:
	@sh_var="Hello, from shell"; echo $$sh_var

	@echo $(mk_var)
```

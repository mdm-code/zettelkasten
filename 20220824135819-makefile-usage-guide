# makefile usage guide


+make +makefile +gnu +linux +unix +compile


/Users/michal/Documents/journal/zettel/20221014135021-make-file-set-env-variables


Here is the guide that I based this entry on: https://makefiletutorial.com/

NOTE: The `GNU Make` is what this guide covers. Other systems should also work
just fine.


## Syntax

The syntax for a single rule (Makefile usually has more than rule) goes as 
follows:

```make
targets: requirements
	command
	command
	command
```

TARGETS are separated with spaces, so are REQUIREMENTS, but the latter have to
exist for the rule to run. COMMANDs need to start with a TAB, not spaces.

Targets are usually file names, if they exist, the rule would not be run.


## Variables

Only strings are allowed as variables, and you set them with `:=` (default),
but `=` also works well in most cases.

Variables can then be referenced using either `${x}` or `$(x)` (also $x, but
this is considered bad practice.)

E.g.:
```make
files := file1 file2

file3: ${files}
	echo "depends on: " $(files)

file1:
	touch file1

file2:
	touch file2
```


## Targets

It's easy to make an ALL target and place it as the first rule in the makefile.
this way, the ALL target will run as default when there's no target given passed
to the make command.

```make

all: one.c two.c three.c

...
```

Multiple targets means that the command runs for each and every one of them. There
is an automatic variable $@ that stores the target name so that it can be used for
invocation.


```make
f1.o f2.o:
	echo $@
...
```

This make runs for both targets separately. It equals placing them in separate
targets, but this would make it more verbose.


## Wildcards

There are two wildcards used in a makefile: % and *.

The latter * searches the file system, however, unless wrapped inside of a
wildcard function, it will no expand when there's no match found. Remeber to
use it like this:

```make
files = $(wildcard *.c)

one: files
```

The unexpanded variable assignments left as they are when the wildcard function
is not used mean that `file = *.c` will have exactly this literal assigned.

Make sure * is not used directly in the variable definition: this is another
common pitfall.

MAKE SURE YOU USE THE WILDCARD FUNCTION with the Kleene star.

The % wildcard is used in wider context:

1. In matching mode, it matches one or more characters of a string. This is
called the stem.
2. In replacing mode, it takes whatever's matched in the stem and replaces it
with something else.

It is usually used in rule definitions and in some specific functions


## Automatic variables

Here is a complete list of all automatic variables used by the GNU make:

https://www.gnu.org/software/make/manual/html_node/Automatic-Variables.html

Ninety-nine percent of the time, only the most common ones are used.

```make
foo: bar.c baz.c
	# Output the name of the rule
	echo $@

	# Output all prerequisites newer than the target
	echo $?

	# Output all prerequisites
	echo $^

# postgres full text indices


+ postgres +gin +trigram +index +inverted +tsvector +ranking


/Users/michal/Documents/journal/zettel/20211228130509-postgres-string-aggregate
/Users/michal/Documents/journal/zettel/20210830190710-postgres-cli-psql
/Users/michal/Documents/journal/zettel/20211122144035-crontab-scheduling


Two indices  that I want to quickly cover here
are:
1. Gin index (Generalized inverted index)
2. Trigram index
** There is also `gist` in PostgreSQL, which stands for a genralized search tree-based
index. Look up the docs to get the idea.

NOTE 1: They allow for a full-text search that is faster and more scalable than
carrying out a fuzzy search with PostgreSQL `LIKE` or `ILIKE` operators in a
`WHERE` clause.

NOTE 2: Elastic Search and Apache Solr offer much more horizontally scalable
solutions, but for small-scale (idk..., 100m rows) PostgreSQL should do fine.

NOTE 3: There is also PostgreSQL GIN index for JSONB using jsonb_ops and
json_path_ops.


## Gin
The first one is created in PosgtgreSQL like this:

```sql
CREATE INDEX text_idx ON data
USING gin (to_tsvector('english', text));
```

There is no need to create a separate row with text represented as tsvectors,
but it is a viable option as well; however, it involves updating to column with
either a function trigger or some external sql query run in, e.g., crontab.

Here is how to add a separate column to an existing table:

```sql
ALTER TABLE
    data
ADD
    COLUMN text_tsv tsvector;

UPDATE
    data
SET
    text_tsv = to_tsvector(text);
```

And here you can skip the `to_tsvector` part and just use `... using gin(text)`.


The index can be then queried as follows:

```sql
SELECT id, text FROM data
WHERE to_tsvector('english', text) @@ to_tsquery('english', 'foo') 
```

The `@@` operator looks for an exact match, but there are others of course.


### Tsvector

The `tsvector` stores text as documents and values as a sorted list of distinct
lexemes.

Run the query below to see what's up.

```sql
SELECT 'she sells sea shells at the sea shore'`::tsvector;
```

The word "sea" will be represented just once in the vector.

This query will return a normalized vector based off a sentence where
words are reduced to lexemes and stop words (also punctuation?) are removed.

```sql
SELECT to_tsvector('she sells sea shells at the sea shore')`;
```


### Ranking

For ranking use `ts_rank` in the `ORDER BY` clause like this:

```sql
SELECT
	id, text
FROM
	data
WHERE
	text_tsv @@ to_tsquery('foo & bar & baz')
ORDER BY
	ts_rank(
		text_tsv,
		to_tsquery('foo & bar & ba`')
	)
DESC
```


## Trigram

For trigram-based index, you want to start by adding the following extension to
PostgreSQL as superuser:

```sh
sudo -i -u postgres
psql -d your-db
```

And then:

```sql
CREATE EXTENSION pg_trgm;
```

The gin trigram-based index can be created like this:

```sql
CREATE INDEX text_trgm_index ON data USING gin (text gin_trgm_ops);
```

`gin_trgm_ops` comes from the `pg_trgm` extension.

Then you can query it with `LIKE` and `ILIKE`:

```sql
SELECT
	id, text
FROM data
WHERE text ILIKE '%foo%'
```

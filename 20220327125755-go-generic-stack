# go generic stack


+go +generics +method +interface +type +1.18 +struct +T


/Users/michal/Documents/journal/zettel/20220326213356-go-generics-meaning-of-tilde
/Users/michal/Documents/journal/zettel/20220326154130-go-generics-constraints
/Users/michal/Documents/journal/zettel/20220326210616-go-generics-with-methods
/Users/michal/Documents/journal/zettel/20220326215256-go-generics-any
/Users/michal/Documents/journal/zettel/20211222142409-primer-on-go-generics
/Users/michal/Documents/journal/zettel/20220327183807-go-generics-default-generic-type-value


Here is a basic implementation of a generic stack in Go (mind the trick with
the default node value of the node):

```go
package main

import (
	"errors"
	"fmt"

	"golang.org/x/exp/constraints"
)

var MissingVal = errors.New("there aren't any values on the stack")

type Stack[T constraints.Ordered] struct {
	head *node[T]
}

type node[T constraints.Ordered] struct {
	next *node[T]
	val  T
}

func (s *Stack[T]) Push(v T) {
	n := node[T]{next: s.head, val: v}
	s.head = &n
}

func (s *Stack[T]) Pop() (T, error) {
	if s.head == nil {
		return *new(T), MissingVal
	}
	v := s.head.val
	s.head = s.head.next
	return v, nil
}

func (s *Stack[T]) Peek() (T, error) {
	if s.head == nil {
		return *new(T), MissingVal
	}
	return s.head.val, nil
}

func main() {
	ss := new(Stack[string])
	ss.Push("hello")
	ss.Push("world")
	fmt.Println(ss)
	si := Stack[int]{}
	si.Push(1)
	si.Push(2)
	si.Push(3)
	si.Push(4)
}
```

# go templates


+go +template +dynamic +data +text +html +nest +nested


https://godocs.io/text/template
https://godocs.io/text/template


This bit here is about the usage of templates in Go. The basic elements of
templating in a programming languge covers topics such as creating a template,
injecting dynamic date into it (in Go it likely uses reflection under the
hood), utilizing complex data structures such as arrays, sliices or maps,
embedding templates in binaries.

There are two main packages in Go that handle templating:

1. One is text/template
2. There other is html/template

THE FIRST ONE (1!) CAN BE USED WHEN THERE IS NO INJECTION RISK. The second one
can be usd to format HTML pages. It includes a protection mechanism against
malicious code injected into the user input. If the goal is to generate HTML,
do use the `html/template` package instead of the text one.

DATA ENTERED BY THE USER SHOULD ALWAYS BE VALIDATED. USERS SHOULD NOT BE TRUSTED.


## Template actions

The action indicates that the system has to do something. It can either be
about data evaluation or control structures. Actions are delimited by double
curly bracers like so:

```html
<l1> The title is {{ . }} </h1>
```

In short, here the engine is asked to insert the value of the 2nd argument
passed to `template.Execute` method. ` {{ . }} `  is a template DIRECTIVE - a
part of the pseudo-scripting language.


In order to access a property on an object, one has to write a dot and the name 
of the property, e.g.:

```html
<h2> The subtitle is {{ .Subtitle }} <h2>
```


## Dot notation

INSIDE OF AN ITERATION, the dot represents the local context, and no the global one.

`.Subtitle` and `$.Subtitle` are equivalent.

Inside of an iteration the `.` dot represents the iteration local context like so:

```html
// iterate over a list of articles:
{{ range .ShoppingList }}
	<li>{{ $.Name }} {{ . }}</li>
{{ end }}
```

And then `$` is used to access the name variable existing in the global context.


## Whitespace removal

Here is the syntax for whitespace removal:

```html
// Name = "Tom"
// Gen = "'s"
<p>{{ .Name - }} {{ - .Gen }}</p>
```

The `-` minus notation removes whitespace from the left and right depending on
where its placed. It will not affect whitespace stored as a part of the
variable string value.


## Printing out dates

Let's assume that the date object stored in a database (for instance, as a full
timezone aware sql timestamp), and we want to represent it using a template.
Here is how to print out dates:

Instead of using just the dot notation, that would print out the whole timestamp
to the microsecond with the timezone, one can use the `.Format` "method" on the
date to give it a predefined format to adhere to.

```html
<p> {{ The initial date is .Date.Format "2023-02-12" }}</p>
```

The date above will get rendered as expected according to the layout.


## Nested templates

Templates can be embedded inside one another to reduce duplication and
repetition. One has to DEFINE a template before importing it and then call it
with the TEMPLATE keyword:

```html
// derived.html
{{ define "derived" }}
    <!--Content of the template named X -->
{{ end }}
...


// index.html/base.html
{{ template "derived" . }}
...
```

The dot notation gives access to all variables inside of the enclosing scope to
the nested template `derived`.

!NOTE: All files used here have to be parsed with `template.ParseFiles` on the
backend.


## Variables

(1) Variable assignment syntax is given below.
(2) Variables are scoped meaning that variables defined in complex flow control, say
    an if statement, lives only inside of that scope and it cannot be used outside of
    {{end}} block delimiter.

```html
{{ $MyVar := .Date }}


// ... and it can be reassigned the same way with `=` instead of `:=`

{{ $MyVar = .NewDate }}
```


## Method calls

Here is a good recapitulation of all built-in functions: https://pkg.go.dev/text/template#hdr-Functions.

There aren't any issues with calling methods when using templates however there are few prerequisites,
namely,

	* The method should return either ONE or TWO vales at most
	* Provided it returns two values, the second one implements the `error` interface.

```go
type S struct {}

func (S) foo(v string) string { return v }

func (S) bar() string { return "BAR" }

// ... then inside the template:
// the first one without the parameter and
// the other one with the parameter.

<p>{{ .bar }}</p>
<p>{{ .foo "value" }}</p>
// or
<p>{{ call .foo "value" }}</p>
```


## Predefined global functions (and the definition of truth)


1. AND (a variadic function)

It checks the boolean value of each argument, (1) when it encounters false, it
RETURNS FALSE directly, when it evaluates to true (2) it RETURNS its last
ARGUMENT.


2. What is false?

	a) EMPTY slice, array, map and a string
	b) complext number != 0
	c) a function, channel, pointer and interface that IS NIL
	d) an integer (both signed and unsigned) == 0
	e) a float == 0
	f) STRUCTS ARE ALWAYS TRUE


3. Example

```
{{ if .Foo .Bar }}
	... // do some stuff with .Bar here
{{ end }}
```


## Custom template functions


We will create a template.FuncMap. The type behind FuncMap is
`map[string]interface{}`. It’s a map of strings to empty interface. Then we can
add to our map the functions we want to add to the template:


```go
var capitalizeFirstLetter = func(text string)string{return strings.Title(text)}
funcs := template.FuncMap{"capitalizeFirstLetter": capitalizeFirstLetter}
tmpl, err := template.New("product-dynamic.html").Funcs(funcs).ParseFiles("./views/product-dynamic.html")

...

<p>{{capitalizeFirstLetter "test"}}</p>  // this output a capitalized word `Test`
```


## Conditionals

There is if/then/elseif/else block of conditionals, nothing else:

If can be used to evaluate the truth value of the argument. 

```
{{ if .Sale }}
    //...
{{ elseif .ExtraDiscount }}
    //...
{{ else }}
    //...
{{ end }}
```

## Iteration

Here is how range works:

```
// template
<ul>
    {{range $index, $element := .ShippingOptions}}
       <li>{{ $element }}</li>
    {{end}}
</ul>
```

Or like this for the sake of brevity:

```
{{range .ShippingOptions}}
    <li>{{ . }}</li>
{{end}}
```

Here is how to use INDEX to access a particular item in range:

```
//template
{{ $firstDelOpt := index .ShippingOptions 0}}
<p>First delivery option is {{ $firstDelOpt }}</p>

// 2D array
{{ $note := index .Notes 0 1}}
<p>First note, second criterion : {{$note}}</p>
```

##  Embed template files into the Go Binary

Go 1.16 introduce a new standard package named embed. With this package, you
can include in your program binary your template files (or other files).

Let’s say that your template files are located in a views dir. You can embed
all files located into the views directory with the //go:embed views/*
directive.

When the program is compiled, Go will populate views with all files located
into the views directory.


```go
// template/basic-embed/main.go 
package main

import (
    "embed"
    "html/template"
    "net/http"
    "time"
)

//go:embed views/*
var views embed.FS

func main {
    tmpl, err := template.ParseFS(views, "views/product.html")
    if err != nil {
        http.Error(w, "Something went wrong", http.StatusInternalServerError)
        return
    }
    // use the template
}
```

Then you can use the function template.ParseFS to load and parse your template
files.


## Debugging a template

During the development phase, you can use this technique to improve your
productivity:

Inside the template, add this line:

```
{{ printf "%#v" . }}
```

This will output (in a human-readable mode) the properties keys and values
passed to the template engine. Here is an example:

```
main.Product{
	Name:"Red Tea Pot 250ml",
	Price:"19.99",
	Description:"Test",
	ShippingDate:time.Time{wall:0xbeffc6aedb25e3e0, ext:18903963863,
	loc:(*time.Location)(0x164dd40)},
	Sale:true,
	SaleImagePath:[]string{"img.jpg"},
}
```

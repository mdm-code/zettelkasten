# go context programming


+go +context +middleware


/Users/michal/Documents/journal/zettel/20220718182530-postgres-multiple-cte-context


The main takeaway when working with context is that it carries some information
that may affect the way a given routine inside of the program behaves. A
context can be anything that can be used to describe an entity and alter its
behaviour at runtime.

There are three main points on why to use context in the program:

* To propagate cancellation downward, say, when a connection gets dropped and
  all the underlying routines running separately should be cancelled out.
* To transmit scoped information down the call stack. For instance, a program
  may register information on the type of the device used to establish the
  connection. It may serve a template with a smaller/adjusted data footprint
  to account for the fact that the connection's been made over a cell phone.
  Other options include:
    - Generating a request ID to be passed around
    - Passing an IP address to the authenticating service to block certain
      connections
    - Reducing the size of the payload returned to the User
* Setting deadlines and timeouts. It means that all subroutines should not
continue to process data after a certain amount of time has passed.


## The gory details:

At the start of the program, one would start it with a `context.Background()`
to create an entity that later context can be derived from. A ROOT context in
other words The Background context is implemented as `context.emptyCtx` of type
int under the hood.

There are four basic methods that this context implements:

```go
func (*emptyCtx) Deadline() (deadline time.Time, ok bool) {
    return
}

func (*emptyCtx) Done() <-chan struct{} {
    return nil
}

func (*emptyCtx) Err() error {
    return nil
}

func (*emptyCtx) Value(key interface{}) interface{} {
    return nil
}
```


## Four types of context

There are four types of context (these are functions that take the parent
context) that can be derived from the empty or background context:

* WithCancel
```go
// This context gives you the way to cancel an operation using a cancel function.
//
// You can imagine that there is a particular condition that might trigger
cancellation, like a particular value, maybe a 404 response code.
ctx, cancel := context.WithCancel(context.Background())
```

```go
package main

import (
	"context"
	"fmt"
	"log"
	"os"
)

var counter int

func main() {
	b := context.Background()
	c, fn := context.WithCancel(b)

	go func() {
		for {
			select {
			case <-c.Done():
				log.Println("Done")
				os.Exit(0)
			default:
			}
		}
	}()

	inner(c, fn)

}

func inner(c context.Context, f func()) {
	if counter == 10 {
		f()
		return
	} else {
		fmt.Println(counter)
	}
	counter++
	inner(c, f)
}
```

* WithTimeout & WithDeadline
```go
// DEADLINE: Here is a timeout with a specific date that will not be exceeded:
deadline := time.Date(2021, 12, 12, 3, 30, 30, 30, time.UTC)
ctx, cancel := context.WithDeadline(context.Background(), deadline)

// TIMEOUT: And here is a context with timeout:
ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)

// The deadline is a particular date and the timeout is just some time, like, say,
5 seconds, 10 minutes, a hundred days, etc.
```

* WithValue
```
// The WithValue context allows you to associate a key-value pair with the 
// parent context.
func context.WithValue(parent context.Context, key any, val any) context.Context
```


## Usage in http client-server communication

```go
ctx, cancel := context.WithTimeout(rootCtx, 50*time.Millisecond)
defer cancel()
// attach context to our request
req = req.WithContext(ctx)
resp, err := http.DefaultClient.Do(req)
if err != nil {
	panic(err)
}
...
```

The context cancellation on the client side is-in a way-propagated to the sever
and can be accessed using the `Context()` method on the http request. There is
no information about the timeout in the header of the request sent over to the
server. The context on the request on the server side is cancelled when the
connection to the client is closed, so this means that one has to listen to the
`ctx.Done()` channel to gather the information about the closure. 

Context cancellation is propagated downwards, so when a context with
cancellation is derived from another one with cancellation, calling the cancel
function on the parent context will propagate cancellation to children contexts
downward. THE CANCELLATION WILL BE PROPAGATED FROM PARENT TO CHILDREN.
